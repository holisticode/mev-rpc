// Code generated by MockGen. DO NOT EDIT.
// Source: /home/mysdcdr/go/pkg/mod/github.com/flashbots/go-utils@v0.13.0/rpcclient/client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	rpcclient "github.com/flashbots/go-utils/rpcclient"
	gomock "github.com/golang/mock/gomock"
)

// MockRPCClient is a mock of RPCClient interface.
type MockRPCClient struct {
	ctrl     *gomock.Controller
	recorder *MockRPCClientMockRecorder
}

// MockRPCClientMockRecorder is the mock recorder for MockRPCClient.
type MockRPCClientMockRecorder struct {
	mock *MockRPCClient
}

// NewMockRPCClient creates a new mock instance.
func NewMockRPCClient(ctrl *gomock.Controller) *MockRPCClient {
	mock := &MockRPCClient{ctrl: ctrl}
	mock.recorder = &MockRPCClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRPCClient) EXPECT() *MockRPCClientMockRecorder {
	return m.recorder
}

// Call mocks base method.
func (m *MockRPCClient) Call(ctx context.Context, method string, params ...any) (*rpcclient.RPCResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, method}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Call", varargs...)
	ret0, _ := ret[0].(*rpcclient.RPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Call indicates an expected call of Call.
func (mr *MockRPCClientMockRecorder) Call(ctx, method interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, method}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Call", reflect.TypeOf((*MockRPCClient)(nil).Call), varargs...)
}

// CallBatch mocks base method.
func (m *MockRPCClient) CallBatch(ctx context.Context, requests rpcclient.RPCRequests) (rpcclient.RPCResponses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallBatch", ctx, requests)
	ret0, _ := ret[0].(rpcclient.RPCResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallBatch indicates an expected call of CallBatch.
func (mr *MockRPCClientMockRecorder) CallBatch(ctx, requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallBatch", reflect.TypeOf((*MockRPCClient)(nil).CallBatch), ctx, requests)
}

// CallBatchRaw mocks base method.
func (m *MockRPCClient) CallBatchRaw(ctx context.Context, requests rpcclient.RPCRequests) (rpcclient.RPCResponses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallBatchRaw", ctx, requests)
	ret0, _ := ret[0].(rpcclient.RPCResponses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallBatchRaw indicates an expected call of CallBatchRaw.
func (mr *MockRPCClientMockRecorder) CallBatchRaw(ctx, requests interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallBatchRaw", reflect.TypeOf((*MockRPCClient)(nil).CallBatchRaw), ctx, requests)
}

// CallFor mocks base method.
func (m *MockRPCClient) CallFor(ctx context.Context, out any, method string, params ...any) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, out, method}
	for _, a := range params {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CallFor", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CallFor indicates an expected call of CallFor.
func (mr *MockRPCClientMockRecorder) CallFor(ctx, out, method interface{}, params ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, out, method}, params...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallFor", reflect.TypeOf((*MockRPCClient)(nil).CallFor), varargs...)
}

// CallRaw mocks base method.
func (m *MockRPCClient) CallRaw(ctx context.Context, request *rpcclient.RPCRequest) (*rpcclient.RPCResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallRaw", ctx, request)
	ret0, _ := ret[0].(*rpcclient.RPCResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallRaw indicates an expected call of CallRaw.
func (mr *MockRPCClientMockRecorder) CallRaw(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallRaw", reflect.TypeOf((*MockRPCClient)(nil).CallRaw), ctx, request)
}
