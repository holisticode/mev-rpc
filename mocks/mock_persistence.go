// Code generated by MockGen. DO NOT EDIT.
// Source: database/mev_persistence.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	database "github.com/holisticode/mev-rpc/database"
)

// MockMEVTraceStorage is a mock of MEVTraceStorage interface.
type MockMEVTraceStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMEVTraceStorageMockRecorder
}

// MockMEVTraceStorageMockRecorder is the mock recorder for MockMEVTraceStorage.
type MockMEVTraceStorageMockRecorder struct {
	mock *MockMEVTraceStorage
}

// NewMockMEVTraceStorage creates a new mock instance.
func NewMockMEVTraceStorage(ctrl *gomock.Controller) *MockMEVTraceStorage {
	mock := &MockMEVTraceStorage{ctrl: ctrl}
	mock.recorder = &MockMEVTraceStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMEVTraceStorage) EXPECT() *MockMEVTraceStorageMockRecorder {
	return m.recorder
}

// LatestBlock mocks base method.
func (m *MockMEVTraceStorage) LatestBlock() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestBlock")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// LatestBlock indicates an expected call of LatestBlock.
func (mr *MockMEVTraceStorageMockRecorder) LatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestBlock", reflect.TypeOf((*MockMEVTraceStorage)(nil).LatestBlock))
}

// OldestBlock mocks base method.
func (m *MockMEVTraceStorage) OldestBlock() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OldestBlock")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// OldestBlock indicates an expected call of OldestBlock.
func (mr *MockMEVTraceStorageMockRecorder) OldestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OldestBlock", reflect.TypeOf((*MockMEVTraceStorage)(nil).OldestBlock))
}

// SaveMEVBLock mocks base method.
func (m *MockMEVTraceStorage) SaveMEVBLock(block *database.MEVBlock) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMEVBLock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMEVBLock indicates an expected call of SaveMEVBLock.
func (mr *MockMEVTraceStorageMockRecorder) SaveMEVBLock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMEVBLock", reflect.TypeOf((*MockMEVTraceStorage)(nil).SaveMEVBLock), block)
}
